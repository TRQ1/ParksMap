#!groovy

def GUID= "bccb"
// Set variable globally to be available in all stages
def myApp = "MLBParks"
// Set Maven command to always include Nexus Settings
def mvnCmd      = "cd ./${myApp}; pwd; mvn -s ../nexus_settings.xml"
// Set Development and Production Project Names
def devProject  = "${GUID}-parks-dev"
def prodProject = "${GUID}-parks-prod"
// Set the tag for the development image: version + build number
def devTag      = "0.0-0"
// Set the tag for the production image: version
def prodTag     = "0.0"
// Set the Application
def activeApp = ""
def destApp = ""
def version = ""

// Url 
def sonarArgs = " sonar:sonar -Dsonar.host.url=http://sonarqube-${GUID}-sonarqube.apps.na311.openshift.opentlc.com/"
def regiUrl = "nexus3-registry.${GUID}-nexus.apps.na311.openshift.opentlc.com"
//def mvnRelUrl = "http://nexus3-q1-xyz-nexus.apps.na311.openshift.opentlc.com/repository/maven-all-public/"
def mvnRelUrl = "http://nexus3-${GUID}-nexus.apps.na311.openshift.opentlc.com/repository/releases"

node('maven-appdev') {
  // Define Maven Command. Make sure it points to the correct settings for our
  // Nexus installation. The file nexus_openshift_settings.xml needs to be in the
  // Application's name

  stage('Checkout Source') {
     git 'http://gogs-q1-xyz-gogs.apps.na311.openshift.opentlc.com/test1/ParksMap.git'
     //checkout scm
    script {
      def pom = readMavenPom file: "./${myApp}/pom.xml"
      version = getVersionFromPom("./${myApp}/pom.xml")

      devTag  = "${version}-" + currentBuild.number
      prodTag = "${version}"

    }
  }

  stage('Blue/Green Production Deployment') {
    echo "Blue/Green Deployment"
    openshift.withCluster() {
    openshift.withProject("${prodProject}") {
      activeApp = openshift.selector("route", "mlbparks-bluegreen").object().spec.to.name
      if (activeApp == "mlbparks-blue") {
        destApp = "mlbparks-green"
      }
      echo "Active Application:      " + activeApp
      echo "Destination Application: " + destApp

      // Update the Image on the Production Deployment Config
      def dc = openshift.selector("dc/${destApp}").object()
      dc.spec.template.spec.containers[0].image="docker-registry.default.svc:5000/${devProject}/mlbparks:${prodTag}"
      openshift.apply(dc)

      // Deploy the inactive application.
      echo "Starting dc rollouting"
      openshift.selector("dc", "${destApp}").rollout().latest();

      // Wait for application to be deployed
      echo "dc_prod"
      def dc_prod = openshift.selector("dc", "${destApp}").object()
      echo "dc_version"
      def dc_version = dc_prod.status.latestVersion
      echo "rc_prod"
      def rc_prod = openshift.selector("rc", "${destApp}-${dc_version}").object()
      echo "Waiting for ${destApp} to be ready"
      while (rc_prod.spec.replicas != rc_prod.status.readyReplicas) {
        sleep 5
        rc_prod = openshift.selector("rc", "${destApp}-${dc_version}").object()
        }
        }
      }
  }

    stage('Switch over to new Version') {
        // TBD: Stop for approval
        echo "Switching Production application to ${destApp}."
        script {
          openshift.withCluster() {
          openshift.withProject("${prodProject}") {
            def route = openshift.selector("route/mlbparks-bluegreen").object()
            route.spec.to.name="${destApp}"
            openshift.apply(route)
          }
        }
        // TBD: After approval execute the switch

      }
  }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
